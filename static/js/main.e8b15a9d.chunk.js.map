{"version":3,"sources":["Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","fetchSearchResults","query","searchURL","axios","get","then","res","console","log","data","setState","results","loading","catch","error","handleOnInputChange","event","target","value","renderSearchResults","state","length","className","map","result","key","RecordNumber","id","City","State","Country","this","type","pattern","maxLength","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gSAEqBA,E,kDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,mBAAqB,SAACC,GAClB,IAAMC,EAAS,+CAA2CD,GAE1DE,IAAMC,IAAIF,GACLG,MAAO,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,SAAS,CACVC,QAASL,EAAIG,KACbG,SAAQ,OAGfC,OAAO,SAAAC,GACDA,GACC,EAAKJ,SAAS,CACdE,SAAQ,QAxBN,EA8BlBG,oBAAsB,SAACC,GACnB,IAAMf,EAAQe,EAAMC,OAAOC,MAC3B,EAAKR,SAAS,CACVT,MAAQA,EACRW,SAAU,IACX,WACS,EAAKZ,mBAAmBC,OApCtB,EAwClBkB,oBAAsB,WAClB,IAAMR,EAAU,EAAKS,MACrB,GAAGT,EAAQA,QAAQU,OACf,OACI,yBAAKC,UAAU,WACVX,EAAQA,QAAQY,KAAI,SAAAC,GACjB,OACI,uBAAGC,IAAKD,EAAOE,cACX,yBAAKC,GAAG,qBACR,2BAAIH,EAAOI,MACX,2BAAIJ,EAAOK,OACX,2BAAIL,EAAOM,gBAhDnC,EAAKV,MAAM,CACPnB,MAAO,GACPU,QAAS,GACTC,SAAQ,GANE,E,qDA8Dd,IAAMX,EAAQ8B,KAAKX,MAAMnB,MAEzB,OACI,6BACG,0BAAM0B,GAAG,QACJ,2BAAOL,UAAU,UACd,uBAAGK,GAAG,UAAN,qBACC,2BACIA,GAAG,eACHK,KAAK,SAELC,QAAQ,SACRC,UAAU,IACVhB,MAAQjB,EACRkC,YAAY,WACZC,SAAUL,KAAKhB,wBAS1BgB,KAAKZ,2B,GAxFckB,aCUrBC,MATf,WACE,OACE,yBAAKhB,UAAU,OAEb,kBAAC,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAMwC,c","file":"static/js/main.e8b15a9d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nexport default class Search extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            query: '',\r\n            results: {},\r\n            loading:false,\r\n        }\r\n    }\r\n\r\n    fetchSearchResults = (query) => {\r\n        const searchURL = `http://ctp-zip-api.herokuapp.com/zip/${query}`\r\n\r\n        axios.get(searchURL,)\r\n            .then ( res => {\r\n                console.log(res.data);\r\n                this.setState({\r\n                    results: res.data,\r\n                    loading:false\r\n                })\r\n            })\r\n            .catch( error => {\r\n                if(error){\r\n                    this.setState({\r\n                    loading:false,\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    handleOnInputChange = (event) =>{\r\n        const query = event.target.value;\r\n        this.setState({\r\n            query : query,\r\n            loading : true,\r\n        }, () =>{ \r\n                    this.fetchSearchResults(query);\r\n                })\r\n    }\r\n\r\n    renderSearchResults = () => {\r\n        const results = this.state;\r\n        if(results.results.length){\r\n            return(\r\n                <div className=\"results\">\r\n                    {results.results.map(result => {\r\n                        return(\r\n                            <a key={result.RecordNumber}>\r\n                                <div id=\"individual-result\">\r\n                                <p>{result.City}</p>\r\n                                <p>{result.State}</p>\r\n                                <p>{result.Country}</p>\r\n                                </div>\r\n                            </a>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const query = this.state.query;\r\n        //console.warn(this.state)\r\n        return (\r\n            <div>\r\n               <form id=\"form\">\r\n                    <label className=\"search\">\r\n                       <p id=\"prompt\">enter a zip code:</p>\r\n                        <input \r\n                            id=\"search-input\" \r\n                            type=\"number\" \r\n                            //name=\"zip\" \r\n                            pattern=\"[0-9]*\"\r\n                            maxLength=\"5\"\r\n                            value ={query}\r\n                            placeholder=\"zip code\"\r\n                            onChange={this.handleOnInputChange}\r\n                        />\r\n                    </label>\r\n                   {/*\r\n                    <div id=\"div3\">\r\n                    <button id=\"searchbutton\">search</button>\r\n                    </div>\r\n                   */}\r\n               </form>\r\n                {this.renderSearchResults()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Search from \"./Search\"\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Search/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}